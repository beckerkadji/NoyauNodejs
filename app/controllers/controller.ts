import dotenv from "dotenv";
import { Controller } from "tsoa";
import cloudinary from "cloudinary";
import streamifier from "streamifier"

dotenv.config();

cloudinary.v2.config({
    cloud_name : process.env.CLOUD_NAME,
    api_key: process.env.CLOUDINARY_API_KEY,
    api_secret : process.env.CLOUNDINARY_API_SECRET
})


export interface IResponse {
    code : number,

    message ?: string,

    data?: any
}

export class My_Controller extends Controller {


    public validate (schema: any, fields:any) : boolean | object {
        
        const validation  = schema.validate(fields,  { abortEarly: false });
        let errors : any = {};
        if (validation.error){
            for (const field of validation.error.details){
                errors[field.context.key] = field.message
            }
            return errors;
        }else {
            return true
        }
        
    }

    public async uploadFile (image : Express.Multer.File) : Promise <any>{

        return new Promise((resolve, rejects) => {
        const uploadStream = cloudinary.v2.uploader.upload_stream({
            folder: "foo"
        },
        (error, result) => {
            if(error){
                console.log();
                console.log("** File Upload (Promise)");
                console.warn(error);
                rejects(error)
            } else {
                console.log();
                console.log("** File Upload (Promise)");
                console.log("* public_id for the uploaded image is generated by Cloudinary's service.");
                resolve(result)
            }  
            
        })
        streamifier.createReadStream(image.buffer).pipe(uploadStream)
        })
        
    }  
}

